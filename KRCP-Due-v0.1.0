// Use kOS action groups to trigger warnings instead of kRPC | Can be done in code later

// Possible Errors: (int) might mess up math in warnings and commnet

#include <Keyboard.h>
#include <ShiftIn.h>
#include <ShiftRegister74HC595.h>

#include <SPI.h>
#include <bitBangedSPI.h>
#include <MAX7219.h>

#include <krpc.h>
#include <krpc/services/krpc.h>
#include <krpc/services/space_center.h>

// kRPC Objects
HardwareSerial * conn;
krpc_SpaceCenter_Flight_t flight;
krpc_SpaceCenter_Control_t control;
krpc_SpaceCenter_Vessel_t vessel;
krpc_SpaceCenter_SASMode_t mode;
krpc_SpaceCenter_Resources_t resources;
krpc_SpaceCenter_Comms_t comms;
krpc_SpaceCenter_Camera_t camera;
krpc_SpaceCenter_Orbit_t orbit;
krpc_SpaceCenter_Vessel_t target;
krpc_SpaceCenter_Parts_t parts_obj;
krpc_list_object_t parts_list;

// kRPC Utilities
float timewarp = 0;
int navBallMode = 1;
float resLevel;
float maxLevel;
int resourceRatio;
int resourceBank;
double commLink;
bool stateSAS;
double temp;
double maxTemp;
double sTemp;
double maxSTemp;

// # Chips
ShiftIn<8> shift_buttons;

// Other Utilities
long previousMillis = 0;
long oxPreviousMillis = 0;
int oxPrevLevel = 0;
bool hasChanged();
bool allZero = true;
const int pressK = 0;
const int holdK = 1;
//int displayMode = 1;
const long interval = 300;
const long oxInterval = 3000;
int oxygen = 3;
int heat = 2;
int electric = 4;
int impact = 1;
int buzzerImpact = 0;
int buzzerHeat = 0;
int buzzerOxygen = 0;
int buzzerElectric = 0;
int r = 0;

// LED Shift Outs (0-9 are SAS Modes, 10-26 are AG's)
const int heatWarning = 27;
const int oxWarning = 28;
const int impactWarning = 29;
const int electricWarning = 30;
const int timeWarpLight = 31;
const int gearAGLight = 32;
const int lightsAGLight = 33;
const int brakesAGLight = 34;
const int commNetLight = 35;

// Number Constants
const int nKeyPresses = 42;
const int nToggles = 4;
const int nAllKeys = (nKeyPresses + nToggles);
const int nSAS = 10;
const int nAG = 7;
const int nAllShiftIn = 63;
const int nResources = 9;

// # Chips / DATA / CLOCK / LATCH
ShiftRegister74HC595 sr_lights (5, 3, 4, 5);
ShiftRegister74HC595 sr_resources (8, 6, 7, 8);
ShiftRegister74HC595 sr_resources2 (8, 9, 10, 11);
ShiftRegister74HC595 sr_resources3 (6, 12, 13, 14);

// Extra Buttons (hard code pins)
const int warningResetPin = 15;
const int ignitionKeysPinL = 16;
const int ignitionKeysPinR = 17;
const int buzzerPin = 18;

int ASCII[] = {

		   // EVA Controls
		  98,     // EVA Board        (B)              <<<<< Change hotkey binding in KSP (brakes)
		  80,     // EVA Jump/Let Go  (P)              <<<<< Change hotkey binding in KSP Y/O/P/; (stage)
                  89,     // EVA Up           (Y)              <<<<< Change hotkey binding in KSP Y/O/P/; (thrust)
                  79,     // EVA Down         (O)              <<<<< Change hotkey binding in KSP Y/O/P/; (thrust)
                 102,     // EVA Grab         (F)
                  59,     // EVA Headlamp     (;)              <<<<< Change hotkey binding in KSP Y/O/P/; (RCS translate right)
                 
		   8,     // Abort            (BACKSPACE)
		   
		   // Action Groups
                  49,     // AG 1             (1)
                  50,     // AG 2             (2)
                  51,     // AG 3             (3)
                  52,     // AG 4             (4)
                  53,     // AG 5             (5)
                  54,     // AG 6             (6)
                  55,     // AG 7             (7)
                  56,     // AG 8             (8)
                  57,     // AG 9             (9)
                  48,     // AG 10            (10)
		  
		   // Navigation and Camera
		  96,     // Reset Map        (`)
		 179,     // Cycle Map        (TAB)
		 000,     // Cycle Nav	      (----)   // Needs function
		 195,     // Toggle UI        (F2)
		  93,     // Cycle Ships      (])
		  99,     // IVA              (C)
		 118,     // Cycle Views      (V)
		 194,     // Screenshot       (F1)
		 222,     // Zoom Out         (Numpad -)
		 217,     // Camera Down      (Arrow Down)
		  44,     // Timewarp -       (,)
		  27,     // Escape           (ESC)
		 215,     // Camera Right     (Arrow Right)
		  47,     // Stop Timewarp    (/)
		  46,     // Timewarp +       (.)
		  
		 134,     // Trim             (ALT)
		  32,     // Stage            (SPACE)
		  
		 216,     // Camera Left      (Arrow Left)
		 218,     // Camera Up        (Arrow Up)
		 134,     // Phys Timewarp    (ALT)
		  223,     // Zoom In          (Numpad +)
		  
		  120,     // Reset Trim       (X)
		   98,     // Brake Hold       (B)
		   
		  117,     // Lights           (U)
		  103,     // Gear             (G)
		   98,     // Brakes           (B)              <<<<< Needs own function
		   
		    // Toggles
		  116,     // SAS              (T)
		  114,     // RCS              (R)
		  109,     // Map              (M)
                  235,     // Navball          (Numpad .)
};

int pressHold[] = {

		   // EVA Controls
		 pressK,     // EVA Board        (B)              <<<<< Change hotkey binding in KSP (brakes)
		 pressK,     // EVA Jump/Let Go  (P)              <<<<< Change hotkey binding in KSP Y/O/P/; (stage)
                 holdK,     // EVA Up           (Y)              <<<<< Change hotkey binding in KSP Y/O/P/; (thrust)
                 holdK,     // EVA Down         (O)              <<<<< Change hotkey binding in KSP Y/O/P/; (thrust)
                 pressK,     // EVA Grab         (F)
                 pressK,     // EVA Headlamp     (;)              <<<<< Change hotkey binding in KSP Y/O/P/; (RCS translate right)
                 
		 pressK,     // Abort            (BACKSPACE)
		   
		   // Action Groups
                 pressK,     // AG 1             (1)
                 pressK,     // AG 2             (2)
                 pressK,     // AG 3             (3)
                 pressK,     // AG 4             (4)
                 pressK,     // AG 5             (5)
                 pressK,     // AG 6             (6)
                 pressK,     // AG 7             (7)
                 pressK,     // AG 8             (8)
                 pressK,     // AG 9             (9)
                 pressK,     // AG 10            (10)
		  
		   // Navigation and Camera
		 pressK,     // Reset Map        (`)
		 pressK,     // Cycle Map        (TAB)
		 pressK,     // Cycle Nav	      (----)   // Needs function
		 pressK,     // Toggle UI        (F2)
		 pressK,     // Cycle Ships      (])
		 pressK,     // IVA              (C)
		 pressK,     // Cycle Views      (V)
		 pressK,     // Screenshot       (F1)
		 holdK,     // Zoom Out         (Numpad -)
		 holdK,     // Camera Down      (Arrow Down)
		 pressK,     // Timewarp -       (,)
		 pressK,     // Escape           (ESC)
		 holdK,     // Camera Right     (Arrow Right)
		 pressK,     // Stop Timewarp    (/)
		 pressK,     // Timewarp +       (.)
		  
		 holdK,     // Trim             (ALT)
		 pressK,     // Stage            (SPACE)
		  
		 holdK,     // Camera Left      (Arrow Left)
		 holdK,     // Camera Up        (Arrow Up)
		 holdK,     // Phys Timewarp    (ALT)
		 holdK,     // Zoom In          (Numpad +)
		 
		 pressK,     // Reset Trim       (X)
		 holdK,     // Brake Hold       (B)
		   
		 pressK,     // Lights           (U)
		 pressK,     // Gear             (G)
		 pressK,     // Brakes           (B)              <<<<< Needs own function
		   
};

int kRPCActionGroup[] {
                  // Custom Action Groups
                 11,      // CAG 11
                 12,      // CAG 12
                 13,      // CAG 13
                 14,      // CAG 14
                 15,      // CAG 15
                 16,      // CAG 16
                 17,      // CAG 17
};

krpc_SpaceCenter_SASMode_t kRPC_SASModes[] {
                  // Navigation
                 KRPC_SPACECENTER_SASMODE_STABILITYASSIST,
                 KRPC_SPACECENTER_SASMODE_MANEUVER,
                 KRPC_SPACECENTER_SASMODE_PROGRADE,
                 KRPC_SPACECENTER_SASMODE_RETROGRADE,
                 KRPC_SPACECENTER_SASMODE_NORMAL,
                 KRPC_SPACECENTER_SASMODE_ANTINORMAL,
                 KRPC_SPACECENTER_SASMODE_RADIAL,
                 KRPC_SPACECENTER_SASMODE_ANTIRADIAL,
                 KRPC_SPACECENTER_SASMODE_TARGET,
                 KRPC_SPACECENTER_SASMODE_ANTITARGET,
};

char* resourceNames[] = {
                  // Resource List
                  "SolidFuel",
                  "LiquidFuel",
                  "LiquidOxygen",
                  "MonoPropellant",
                  "ElectricCharge",
                  "Food",
                  "Water",
                  "Oxygen",
                  "EVAPropellant",
};

void setup() {

  // Connect to the Server
  conn = &Serial;
  krpc_open(&conn, NULL);
  krpc_connect(conn, "Flight Control");

  // kRPC Activation
  krpc_SpaceCenter_ActiveVessel(conn, &vessel);
  krpc_SpaceCenter_Vessel_Control(conn, &control, vessel);
  krpc_SpaceCenter_Vessel_Flight(conn, &flight, vessel, KRPC_NULL);
  krpc_SpaceCenter_Vessel_Resources(conn, &resources, vessel);
  krpc_SpaceCenter_Vessel_Comms(conn, &comms, vessel);
  krpc_SpaceCenter_Vessel_Parts(conn, &parts_obj, vessel);
  krpc_SpaceCenter_Parts_All(conn, &parts_list, parts_obj);

	// LOAD, CLKE, DATA, CLK
	shift_buttons.begin(8, 19, 20, 21);

  // ShiftOut
  sr_lights.setAllLow();
  sr_resources.setAllLow();
  sr_resources2.setAllLow();
  sr_resources3.setAllLow();

  // Hardcoded Pins
  pinMode(warningResetPin, INPUT);
  pinMode(ignitionKeysPinL, INPUT);
  pinMode(ignitionKeysPinR, INPUT);
  pinMode(buzzerPin, OUTPUT);
}

void loop() {

  unsigned long currentMillis = millis();

  // Button Mode
  if ((digitalRead(ignitionKeysPinL) == HIGH) and (digitalRead(ignitionKeysPinR) == HIGH)) {
	  key_Presses();
    kRPC_Presses();
    AG_Lights();
    SAS_Lights();
    utilityLights();
    if (currentMillis - previousMillis > interval) {
      resourceLevels();
      previousMillis = currentMillis;
      r = 0;
    }
  }

  // Low Power Mode
  if ((digitalRead(ignitionKeysPinL) == LOW) and (digitalRead(ignitionKeysPinR) == LOW)) {
    for (int i = 0; i < 36; i++){
      sr_lights.set(i, LOW);
      sr_resources.set(i, LOW);
      sr_resources2.set(i, LOW);
      sr_resources3.set(i, LOW);
    }
    delay(10);
  }

  // Debug Mode
  else {
      debugMode();
      krpc_connect(conn, "Flight Control");
  }
  
  digitalWrite(buzzerPin, LOW);
	delay(1);
}

void key_Presses() {
  shift_buttons.update();
  
  // Keypresses
  for (int i = 0; i < nKeyPresses; i++){
    if (shift_buttons.hasChanged(i)==1){
      if ((shift_buttons.state(i)==1) and (pressHold[i]==0)){
        Keyboard.begin();
        Keyboard.write(ASCII[i]);
      }
      if ((shift_buttons.state(i)==1) and (pressHold[i]==1)){
        Keyboard.begin();
        Keyboard.press(ASCII[i]);}
      if ((shift_buttons.state(i)==0) and (pressHold[i]==1)){
        Keyboard.release(ASCII[i]);}
    }
    // return 0 if any button is pressed
    allZero |= shift_buttons.state(i);
  }
  // end keyboard emulation if no buttons are pressed
  if (allZero) {Keyboard.end();}

  // Toggles
  // i is the number of normal keypresses
  for (int i = nKeyPresses; i < (nAllKeys); i++){
    if (shift_buttons.hasChanged(nKeyPresses)==1){
      krpc_SpaceCenter_Camera_set_Mode(conn, camera, KRPC_SPACECENTER_CAMERAMODE_MAP);
    }
    if (shift_buttons.hasChanged(nKeyPresses)==0){
      if (krpc_SpaceCenter_Camera_Mode(conn, camera, KRPC_SPACECENTER_CAMERAMODE_MAP)){
        Keyboard.begin();
        Keyboard.write(ASCII[nKeyPresses]);
      }
    }
    if (shift_buttons.hasChanged(nKeyPresses + 1)==1){
      krpc_SpaceCenter_set_Navball(conn, true);
    }
    if (shift_buttons.hasChanged(nKeyPresses + 1)==0){
      krpc_SpaceCenter_set_Navball(conn, false);
    }
    if (shift_buttons.hasChanged(nKeyPresses + 2)==1){
      krpc_SpaceCenter_Control_set_RCS(conn, control, true);
    }
    if (shift_buttons.hasChanged(nKeyPresses + 2)==0){
      krpc_SpaceCenter_Control_set_RCS(conn, control, false);
    }
    if (shift_buttons.hasChanged(nKeyPresses + 3)==1){
      krpc_SpaceCenter_Control_set_SAS(conn, control, true);
    }
    if (shift_buttons.hasChanged(nKeyPresses + 3)==0){
      krpc_SpaceCenter_Control_set_SAS(conn, control, false);
    }
  }
}

void kRPC_Presses() {
  // i* is the number of keypresses + toggles
  
  // SAS
  for (int i = (nAllKeys); i < (nAllKeys + nSAS); i++){
    if (shift_buttons.hasChanged(i)==1){
      if (shift_buttons.state(i)==1){
        krpc_SpaceCenter_Control_set_SASMode(conn, control, kRPC_SASModes[i-nAllKeys]);
      }
    }
  }
  
  // Action Groups 11-17
  for (int i = (nAllKeys + nSAS); i < (nAllShiftIn); i++){
    if (shift_buttons.hasChanged(i)==1){
      if (shift_buttons.state(i)==1){
        krpc_SpaceCenter_Control_ToggleActionGroup(conn, control, kRPCActionGroup[i-56]);
      }
    }
  }
  
  // NavBall Modes
  if (shift_buttons.hasChanged((nAllShiftIn))==1){
    if (shift_buttons.state((nAllShiftIn))==1){
      if (navBallMode == 1) {
        krpc_SpaceCenter_Control_set_SpeedMode(conn, control, KRPC_SPACECENTER_SPEEDMODE_ORBIT);
      }
      if (navBallMode == 2) {
        krpc_SpaceCenter_Control_set_SpeedMode(conn, control, KRPC_SPACECENTER_SPEEDMODE_SURFACE);
      }
      if (navBallMode == 3) {
        krpc_SpaceCenter_Control_set_SpeedMode(conn, control, KRPC_SPACECENTER_SPEEDMODE_TARGET);
      }

      navBallMode = (navBallMode + 1);
      if (navBallMode > 3) {
        navBallMode = 1;
      }
    }
  }
}

void SAS_Lights() {
  
  krpc_SpaceCenter_Control_SAS(conn, &stateSAS, control);
  if (stateSAS == false) {
     for (int i = 0; i < nSAS; i++){
       sr_lights.set(i, LOW);
     }
  }
  if (stateSAS == true) {
    krpc_SpaceCenter_Control_SASMode(conn, &mode, control);
    for (int i = 0; i < nSAS; i++){
      if (mode == kRPC_SASModes[i]) {
        sr_lights.set(i, HIGH);
      }
      else {
        sr_lights.set(i, LOW);
      }
    }
  }
}

void AG_Lights() {

  // Lights for all custom action groups
  for (int i = 0; i < nAG; i++) {
    if (krpc_SpaceCenter_Control_GetActionGroup(conn, NULL, control, i)) {
      sr_lights.set(i+nSAS, HIGH);
    }
    else {
      sr_lights.set(i+nSAS, LOW);
    }
  }

  // Lights for standard action groups (Gear, Lights, Brakes)
  if (krpc_SpaceCenter_Control_Gear(conn, NULL, control)) {
    sr_lights.set(gearAGLight, HIGH);
  }
    else {
     sr_lights.set(gearAGLight, LOW);
    }
  if (krpc_SpaceCenter_Control_Lights(conn, NULL, control)) {
    sr_lights.set(lightsAGLight, HIGH);
  }
    else {
     sr_lights.set(lightsAGLight, LOW);
    }
  if (krpc_SpaceCenter_Control_Brakes(conn, NULL, control)) {
    sr_lights.set(brakesAGLight, HIGH);
  }
    else {
     sr_lights.set(brakesAGLight, LOW);
    }
}

void utilityLights() {

  // Timewarp Light
  krpc_SpaceCenter_WarpFactor(conn, &timewarp);
  if ((int) timewarp != 0) {
    sr_lights.set(timeWarpLight, HIGH);
  }
  else {
    sr_lights.set(timeWarpLight, LOW);
  }

  // CommNet Light
  krpc_SpaceCenter_Comms_SignalStrength(conn, &commLink, comms);
  if ((int) commLink > 0) {
    sr_lights.set(commNetLight, HIGH);
  }
  else {
    sr_lights.set(commNetLight, LOW);
  }

  // Heat Warning
  for (int i = 0; i < parts_list.size; i++) {
    krpc_SpaceCenter_Part_Temperature(conn, &temp, parts_list.items[i]);
    krpc_SpaceCenter_Part_MaxTemperature(conn, &maxTemp, parts_list.items[i]);
    krpc_SpaceCenter_Part_SkinTemperature(conn, &sTemp, parts_list.items[i]);
    krpc_SpaceCenter_Part_MaxSkinTemperature(conn, &maxSTemp, parts_list.items[i]);
    if ((((int) temp) > (((int) maxTemp)/2)) or (((int) sTemp) > (((int) maxSTemp)/2))) {
      digitalWrite(heatWarning, HIGH);
      warningBuzzerActivate(heat);
    }
  }

  // Reset Warning Light Button
  if (digitalRead(warningResetPin) == HIGH) {
    sr_lights.set(heatWarning, LOW);
    sr_lights.set(oxWarning, LOW);
    sr_lights.set(impactWarning, LOW);
    sr_lights.set(electricWarning, LOW);
    buzzerImpact = 0;
    buzzerHeat = 0;
    buzzerOxygen = 0;
    buzzerElectric = 0;
  }
}

void resourceLevels () {
  for (int i = 0; i < nResources; i++) {
    krpc_SpaceCenter_Resources_Max(conn, &maxLevel, resources, resourceNames[i]);
    krpc_SpaceCenter_Resources_Amount(conn, &resLevel, resources, resourceNames[i]);

    resourceRatio = round((resLevel / (int) maxLevel) * 20);

    // Resource Bank 1
    if (i < 3) {
    resourceBank = (i * 20);
      for (int r = resourceBank; r < (resourceBank + resourceRatio); r++) {
        sr_resources.set(r, HIGH);
      }
      for (int r = (resourceBank + 20); r > (resourceRatio-1); r--) {
        sr_resources.set(r, LOW);
      }
    }

    // Resource Bank 2
    if ((i > 2) and (i < 6)) {
    resourceBank = ((i-3) * 20);
      for (int r = resourceBank; r < (resourceBank + resourceRatio); r++) {
        sr_resources2.set(r, HIGH);
      }
      for (int r = (resourceBank + 20); r > (resourceRatio-1); r--) {
        sr_resources2.set(r, LOW);
      }
    }

    // Resource Bank 3
    if (i > 5) {
    resourceBank = ((i-6) * 20);
      for (int r = resourceBank; r < (resourceBank + resourceRatio); r++) {
        sr_resources3.set(r, HIGH);
      }
      for (int r = (resourceBank + 20); r > (resourceRatio-1); r--) {
        sr_resources3.set(r, LOW);
      }
    }

    // Oxygen Warning
    if (i==7) {
      if ((int) resLevel < ((int) maxLevel/8)) {
        sr_lights.set(oxWarning, HIGH);
      }
      unsigned long oxCurrentMillis = millis();
      if (oxCurrentMillis - oxPreviousMillis > oxInterval) {
        if ((oxPrevLevel - (int) resLevel) > ((int) maxLevel/20)) {
          sr_lights.set(oxWarning, HIGH);
          warningBuzzerActivate(oxygen);
        }
        oxPreviousMillis = oxCurrentMillis;
        oxPrevLevel = (int) resLevel;
      }
    }

    // Electric Charge Warning
    if (i==4) {
      if ((int) resLevel < ((int) maxLevel/2)) {
        sr_lights.set(electricWarning, HIGH);
        warningBuzzerActivate(electric);
      }
    }
  }
}

void warningBuzzerActivate(int buzzerType) {
  
  // Types: impact, heat, oxygen, electric
  if (buzzerType = 1) {
    if (buzzerImpact < 100) {
      digitalWrite(buzzerPin, HIGH);
      buzzerImpact = buzzerImpact + 1;
    }
    if ((buzzerImpact >= 100) and (buzzerImpact < 200)) {
      digitalWrite(buzzerPin, LOW);
      buzzerImpact = buzzerImpact + 1;
    }
    if ((buzzerImpact >= 200) and (buzzerImpact < 300)) {
      digitalWrite(buzzerPin, HIGH);
      buzzerImpact = buzzerImpact + 1;
    }
    if ((buzzerImpact >= 300) and (buzzerImpact < 400)) {
      digitalWrite(buzzerPin, LOW);
      buzzerImpact = buzzerImpact + 1;
    }
    if ((buzzerImpact >= 400) and (buzzerImpact < 500)) {
      digitalWrite(buzzerPin, HIGH);
      buzzerImpact = buzzerImpact + 1;
    }
  }
  if (buzzerType = 2) {
    if (buzzerHeat < 100) {
      digitalWrite(buzzerPin, HIGH);
      buzzerHeat = buzzerHeat + 1;
    }
    if ((buzzerHeat >= 100) and (buzzerHeat < 200)) {
      digitalWrite(buzzerPin, LOW);
      buzzerHeat = buzzerHeat + 1;
    }
    if ((buzzerHeat >= 200) and (buzzerHeat < 300)) {
      digitalWrite(buzzerPin, HIGH);
      buzzerHeat = buzzerHeat + 1;
    }
    if ((buzzerHeat >= 300) and (buzzerHeat < 400)) {
      digitalWrite(buzzerPin, LOW);
      buzzerHeat = buzzerHeat + 1;
    }
    if ((buzzerHeat >= 400) and (buzzerHeat < 500)) {
      digitalWrite(buzzerPin, HIGH);
      buzzerHeat = buzzerHeat + 1;
    }
  }
  if (buzzerType = 3) {
    if (buzzerOxygen < 100) {
      digitalWrite(buzzerPin, HIGH);
      buzzerOxygen = buzzerOxygen + 1;
    }
    if ((buzzerOxygen >= 100) and (buzzerOxygen < 200)) {
      digitalWrite(buzzerPin, LOW);
      buzzerOxygen = buzzerOxygen + 1;
    }
    if ((buzzerOxygen >= 200) and (buzzerOxygen < 300)) {
      digitalWrite(buzzerPin, HIGH);
      buzzerOxygen = buzzerOxygen + 1;
    }
    if ((buzzerOxygen >= 300) and (buzzerOxygen < 400)) {
      digitalWrite(buzzerPin, LOW);
      buzzerOxygen = buzzerOxygen + 1;
    }
    if ((buzzerOxygen >= 400) and (buzzerOxygen < 500)) {
      digitalWrite(buzzerPin, HIGH);
      buzzerOxygen = buzzerOxygen + 1;
    }
  }
  if (buzzerType = 4) {
    if (buzzerElectric < 100) {
      digitalWrite(buzzerPin, HIGH);
      buzzerElectric = buzzerElectric + 1;
    }
    if ((buzzerElectric >= 100) and (buzzerElectric < 200)) {
      digitalWrite(buzzerPin, LOW);
      buzzerElectric = buzzerElectric + 1;
    }
    if ((buzzerElectric >= 200) and (buzzerElectric < 300)) {
      digitalWrite(buzzerPin, HIGH);
      buzzerElectric = buzzerElectric + 1;
    }
    if ((buzzerElectric >= 300) and (buzzerElectric < 400)) {
      digitalWrite(buzzerPin, LOW);
      buzzerElectric = buzzerElectric + 1;
    }
    if ((buzzerElectric >= 400) and (buzzerElectric < 500)) {
      digitalWrite(buzzerPin, HIGH);
      buzzerElectric = buzzerElectric + 1;
    }
  }
  delay(1);
}

void debugMode() {
  sr_lights.set(r, LOW);
  sr_resources.set(r, HIGH);
  sr_resources2.set(r, HIGH);
  sr_resources3.set(r, HIGH);
  r = r + 1;
  if (r > 190) {
    r = 0;
  }
  delay(500);
}

void analogControls() {
//  krpc_SpaceCenter_Control_Throttle(conn, &throttle, control);
//  krpc_SpaceCenter_Control_Pitch(conn, &pitch, control);
//  krpc_SpaceCenter_Control_Yaw(conn, &yaw, control);
//  krpc_SpaceCenter_Control_Roll(conn, &roll, control);
//  krpc_SpaceCenter_Control_Forward(conn, &forward, control);
//  krpc_SpaceCenter_Control_Up(conn, &up, control);
//  krpc_SpaceCenter_Control_Right(conn, &right, control);
  
//void displayShow() {
//
//  // Change Display Mode
//  if (digitalRead(displayChangePin) ==  HIGH) {
//    displayMode = (displayMode + 1);
//  }
//  krpc_SpaceCenter_Vessel_Orbit(conn, &orbit, vessel);
//  krpc_SpaceCenter_Orbit_Body(conn, &body, orbit);
//  krpc_SpaceCenter_CelestialBody_NonRotatingReferenceFrame(conn, &orbitFrame, body);
//  krpc_SpaceCenter_CelestialBody_ReferenceFrame(conn, &surfaceFrame, body);
//  
//  // Display Mode 1
//  if (displayMode == 1) {
//
//    // Bank 1 (8 digit)
//    // Orbital Velocity
//    krpc_SpaceCenter_Vessel_Flight(conn, &orbitFlight, vessel, orbitFrame);
//    krpc_SpaceCenter_Flight_Speed(conn, &orbitalVelocity, orbitFlight);
//      sprintf(orbitalVelocity_str, "%9.2f", orbitalVelocity);
//    
//    // Surface Velocity
//    krpc_SpaceCenter_Vessel_Flight(conn, &surfaceFlight, vessel, surfaceFrame);
//    krpc_SpaceCenter_Flight_Speed(conn, &surfaceVelocity, surfaceFlight);
//      sprintf(surfaceVelocity_str, "%9.2f", surfaceVelocity);
//    
//    // Vertical Velocity
//    krpc_SpaceCenter_Vessel_Flight(conn, &surfaceFlight, vessel, surfaceFrame);
//      krpc_SpaceCenter_Flight_VerticalSpeed(conn, &verticalVelocity, surfaceFlight);
//      sprintf(verticalVelocity_str, "%9.2f", verticalVelocity);
//
//    // Bank 2 (8 digit)
//    // Apoapsis
//    krpc_SpaceCenter_Orbit_ApoapsisAltitude(conn, &apoapsis, orbit);
//      sprintf(apoapsis_str, "%9.2f", apoapsis);
//      
//    // Periapsis
//    krpc_SpaceCenter_Orbit_PeriapsisAltitude(conn, &periapsis, orbit);
//      sprintf(periapsis_str, "%9.2f", periapsis);
//      
//    // Altitude (Sea)
//    krpc_SpaceCenter_Flight_MeanAltitude(conn, &meanAltitude, flight);
//      sprintf(meanAltitude_str, "%9.2f", meanAltitude);
//
//    // Bank 3 (4 digit)                                                                                        <<<< need to make these shorter strings
//    // Time to AP
//    krpc_SpaceCenter_Orbit_TimeToApoapsis(conn, &apoapsisTime, orbit);
//      sprintf(apoapsisTime_str, "%9.2f", apoapsisTime);
//      
//    // Time to PE
//    krpc_SpaceCenter_Orbit_TimeToPeriapsis(conn, &periapsisTime, orbit);
//      sprintf(periapsisTime_str, "%9.2f", periapsisTime);
//      
//    // Altitude (Surf)
//    krpc_SpaceCenter_Flight_SurfaceAltitude(conn, &srfAltitude, flight);
//      sprintf(srfAltitude_str, "%9.2f", srfAltitude);
//
//    display1.sendString(orbitalVelocity_str);
//    display2.sendString(surfaceVelocity_str);
//    display3.sendString(verticalVelocity_str);
//    display4.sendString(apoapsis_str);
//    display5.sendString(periapsis_str);
//    display6.sendString(meanAltitude_str);
//    display7.sendString(apoapsisTime_str);
//    display8.sendString(periapsisTime_str);
//    display9.sendString(srfAltitude_str);
//
//    // Impact Warning
//    if (((int)srfAltitude < 3000) and ((int)verticalVelocity > 5) and ((int)srfAltitude/(int)verticalVelocity < 6)) {
//      sr_lights.set(impactWarning, HIGH);
//      warningBuzzerActivate(impact);
//    }
//  }
//
//  // Display Mode 2
//  if (displayMode == 2) {
//    krpc_SpaceCenter_TargetVessel(conn, &target);
//    
//    // Bank 1 (8 digit)
//    // Target Relative V
//    //  sprintf(relativeVelocity_str, "%9.2f", relativeVelocity);
//    
//    // Target Distance
//    //  sprintf(targetDistance_str, "%9.2f", targetDistance);
//    
//    // Closest Approach
//    krpc_SpaceCenter_Orbit_DistanceAtClosestApproach(conn, &approachDistance, orbit, target);
//      sprintf(approachDistance_str, "%9.2f", approachDistance);
//
//    // Bank 2 (8 digit)
//    // Time of Closest Approach
//    krpc_SpaceCenter_Orbit_TimeOfClosestApproach(conn, &approachTime, orbit, target);
//      sprintf(approachTime_str, "%9.2f", approachTime);
//      
//    // Period
//    krpc_SpaceCenter_Orbit_Period(conn, &period, orbit);
//      sprintf(period_str, "%9.2f", period);
//      
//    // Eccentricity
//    krpc_SpaceCenter_Orbit_Eccentricity(conn, &eccentricity, orbit);
//      sprintf(eccentricity_str, "%9.2f", eccentricity);
//
//    // Bank 3 (4 digit)
//    // Time to AP
//    krpc_SpaceCenter_Orbit_TimeToApoapsis(conn, &apoapsisTime, orbit);
//      sprintf(apoapsisTime_str, "%9.2f", apoapsisTime);
//      
//    // Time to PE
//    krpc_SpaceCenter_Orbit_TimeToPeriapsis(conn, &periapsisTime, orbit);
//      sprintf(periapsisTime_str, "%9.2f", periapsisTime);
//      
//    // Inclination
//    krpc_SpaceCenter_Orbit_Inclination(conn, &inclination, orbit);
//      sprintf(inclination_str, "%9.2f", inclination);
//
//    display1.sendString(relativeVelocity_str);
//    display2.sendString(targetDistance_str);
//    display3.sendString(approachDistance_str);
//    display4.sendString(approachTime_str);
//    display5.sendString(period_str);
//    display6.sendString(eccentricity_str);
//    display7.sendString(apoapsisTime_str);
//    display8.sendString(periapsisTime_str);
//    display9.sendString(inclination_str);
//
//    // Impact Warning
//    if (((int)approachDistance < 150) and ((int)relativeVelocity > 5) and ((int)approachTime < 10)) {
//      sr_lights.set(impactWarning, HIGH);
//      warningBuzzerActivate(impact);
//    }
//  }
//
//  if (displayMode > 2) {
//    displayMode == 1;
//  }
//}

  
// kRPC Telemetry Display Objects
//krpc_SpaceCenter_CelestialBody_t body;
//krpc_SpaceCenter_Flight_t orbitFlight;
//krpc_SpaceCenter_Flight_t surfaceFlight;
//krpc_SpaceCenter_ReferenceFrame_t orbitFrame;
//krpc_SpaceCenter_ReferenceFrame_t surfaceFrame;
  
// kRPC Telemetry Strings
//char orbitalVelocity_str [15];
//char surfaceVelocity_str [15];
//char verticalVelocity_str [15];
//char apoapsis_str [15];
//char periapsis_str [15];
//char meanAltitude_str [15];
//char apoapsisTime_str [15];
//char periapsisTime_str [15];
//char srfAltitude_str [15];
//char relativeVelocity_str [15];
//char targetDistance_str [15];
//char approachDistance_str [15];
//char approachTime_str [15];
//char period_str [15];
//char eccentricity_str [15];
//char inclination_str [15];

//// kRPC Analog Utilities
//int sensorValue = 0;
//float throttle;
//float pitch;
//float yaw;
//float roll;
//float forward;
//float up;
//float right;

// kRPC Telemetry Utilities
//double orbitalVelocity;
//double surfaceVelocity;
//double verticalVelocity;
//double meanAltitude;
//double srfAltitude;
//double apoapsis;
//double periapsis;
//double period;
//double apoapsisTime;
//double periapsisTime;
//double eccentricity;
//double inclination;
//double approachTime;
//double approachDistance;
//double relativeVelocity;
//double targetDistance;

//  // Throttle Control
//  sensorValue = analogRead(throttlePin);
//  throttle = (sensorValue/1023.0);
//  krpc_SpaceCenter_Control_set_Throttle(conn, control, throttle);
//
//  // Rotation Control
//  sensorValue = analogRead(pitchPin);
//  pitch = ((sensorValue-511)/511.0);
//  krpc_SpaceCenter_Control_set_Pitch(conn, control, pitch);
//  sensorValue = analogRead(yawPin);
//  yaw = ((sensorValue-511)/511.0);
//  krpc_SpaceCenter_Control_set_Yaw(conn, control, yaw);
//  sensorValue = analogRead(rollPin);
//  roll = ((sensorValue-511)/511.0);
//  krpc_SpaceCenter_Control_set_Roll(conn, control, roll);
//
//  // Translation Control
//  sensorValue = analogRead(forwardPin);
//  forward = ((sensorValue-511)/511.0);
//  krpc_SpaceCenter_Control_set_Forward(conn, control, forward);
//  sensorValue = analogRead(upPin);
//  up = ((sensorValue-511)/511.0);
//  krpc_SpaceCenter_Control_set_Up(conn, control, up);
//  sensorValue = analogRead(rightPin);
//  right = ((sensorValue-511)/511.0);
//  krpc_SpaceCenter_Control_set_Right(conn, control, right);
}
